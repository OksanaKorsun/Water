{"version":3,"file":"static/js/937.b547971f.chunk.js","mappings":"kPAEMA,EAAmBC,EAAAA,GAAW,CAClCC,MAAOD,EAAAA,GAAW,oBACfC,MAAM,uBACNC,QAAQ,4BAA6B,sBACrCC,SAAS,qBACZC,SAAUJ,EAAAA,KACPG,SAAS,wBACTE,IAAI,EAAG,+BACPH,QAAQ,WAAY,uDACvBI,gBAAiBN,EAAAA,KACdO,MAAM,CAACP,EAAAA,GAAQ,YAAa,MAAO,wBACnCG,SAAS,kCAEDK,EAAa,WAAH,OACrBC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,aACJC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLC,cAAe,CACbZ,MAAO,GACPG,SAAU,GACVE,gBAAiB,IAEnBP,iBAAkBA,EAClBe,SAAQ,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAE,SAAAC,EAAMC,GAAM,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACd,IAAIC,SAAQ,SAAAC,GAAC,OAAIC,WAAWD,EAAG,IAAI,IAAE,KAAD,EAC1CE,MAAMC,KAAKC,UAAUT,EAAQ,KAAM,IAAI,wBAAAC,EAAAS,OAAA,GAAAX,EAAA,KACxC,gBAAAY,GAAA,OAAAf,EAAAgB,MAAA,KAAAC,UAAA,EAHO,GAGNtB,UAEFD,EAAAA,EAAAA,MAACwB,EAAAA,GAAI,CAAAvB,SAAA,EACHC,EAAAA,EAAAA,KAAA,SAAOuB,QAAQ,QAAOxB,SAAC,sBACvBC,EAAAA,EAAAA,KAACwB,EAAAA,GAAK,CAACC,GAAG,QAAQC,KAAK,QAAQC,YAAY,YAE3C3B,EAAAA,EAAAA,KAAA,SAAOuB,QAAQ,WAAUxB,SAAC,yBAC1BC,EAAAA,EAAAA,KAACwB,EAAAA,GAAK,CAACC,GAAG,WAAWC,KAAK,WAAWC,YAAY,cAEjD3B,EAAAA,EAAAA,KAAA,SAAOuB,QAAQ,kBAAiBxB,SAAC,qBACjCC,EAAAA,EAAAA,KAACwB,EAAAA,GAAK,CACJC,GAAG,kBACHC,KAAK,kBACLC,YAAY,kBACZC,KAAK,cAEP5B,EAAAA,EAAAA,KAAA,UAAQ4B,KAAK,SAAQ7B,SAAC,mBAGtB,EC7CO,SAAS8B,IACtB,OACE/B,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,aACJC,EAAAA,EAAAA,KAACH,EAAU,MAGjB,C","sources":["components/SigninForm/SigninForm.js","pages/SigninPage/SigninPage.js"],"sourcesContent":["import { Formik, Field, Form } from 'formik';\nimport * as Yup from 'yup';\nconst validationSchema = Yup.object({\n  email: Yup.string('Enter your email')\n    .email('Enter a valid email')\n    .matches(/^[^\\s@]+@[^\\s@]+.[^\\s@]+$/, 'Email is not valid')\n    .required('Email is required'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(8, 'Your password is too short.')\n    .matches(/[a-zA-Z]/, 'Password should contain at least one Latin letters.'),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Password must match!')\n    .required('Confirm password is reqired!'),\n});\nexport const SigninForm = () => (\n  <div>\n    <h1>Sign Up</h1>\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n        confirmPassword: '',\n      }}\n      validationSchema={validationSchema}\n      onSubmit={async values => {\n        await new Promise(r => setTimeout(r, 500));\n        alert(JSON.stringify(values, null, 2));\n      }}\n    >\n      <Form>\n        <label htmlFor=\"email\">Enter your email</label>\n        <Field id=\"email\" name=\"email\" placeholder=\"E-mail\" />\n\n        <label htmlFor=\"password\">Enter your password</label>\n        <Field id=\"password\" name=\"password\" placeholder=\"Password\" />\n\n        <label htmlFor=\"confirmPassword\">Repeat password</label>\n        <Field\n          id=\"confirmPassword\"\n          name=\"confirmPassword\"\n          placeholder=\"Repeat password\"\n          type=\"password\"\n        />\n        <button type=\"submit\">Sign Up</button>\n      </Form>\n    </Formik>\n  </div>\n);\n","import { SigninForm } from 'components/SigninForm/SigninForm';\n\nexport default function Login() {\n  return (\n    <div>\n      <h2>Sign In</h2>\n      <SigninForm />\n    </div>\n  );\n}\n"],"names":["validationSchema","Yup","email","matches","required","password","min","confirmPassword","oneOf","SigninForm","_jsxs","children","_jsx","Formik","initialValues","onSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","values","_context","prev","next","Promise","r","setTimeout","alert","JSON","stringify","stop","_x","apply","arguments","Form","htmlFor","Field","id","name","placeholder","type","Login"],"sourceRoot":""}